package com.pranav;

import org.modelmapper.ModelMapper;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

import com.pranav.utility.QuestionsService;

@SpringBootApplication
public class QuizBackendApplication {

	public static void main(String[] args) {
		SpringApplication.run(QuizBackendApplication.class, args);
	}

	
	@Bean
	public ModelMapper getMapper() {
		return new ModelMapper();
	}
	
	
}




package com.pranav.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pranav.dto.TagsDto;
import com.pranav.entity.Tags;
import com.pranav.repository.CategoryRepository;

@RestController
@RequestMapping("api")
@CrossOrigin("http://localhost:4200")
public class CategoriesController {
	
	private final CategoryRepository repo;
	
	@Autowired
	private ModelMapper mapper;
	
	public CategoriesController(CategoryRepository repo) {
		this.repo = repo;
	}
	
	@GetMapping("/categories")
	public List<TagsDto> getTags(){
		List<Tags> tags = repo.findAll();
		
		for(var tag : tags) {
			System.out.println(tag.getImageUrl());
		}
		
		return tags.stream()
				.map(tag -> mapper.map(tag, TagsDto.class))
				.collect(Collectors.toList());
	}
	

}


package com.pranav.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.modelmapper.internal.bytebuddy.description.method.MethodDescription.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pranav.dto.QuestionsDto;
import com.pranav.entity.Questions;
import com.pranav.repository.QuestionsRepository;
import com.pranav.utility.QuestionsService;



@RestController
@RequestMapping("api")
@CrossOrigin("http://localhost:4200")
public class QuestionsController {
	
	
	
	@Autowired
	private QuestionsService service;
	
	@Autowired
	private ModelMapper mapper;
	
	
	
	@GetMapping("/questions")
	public List<QuestionsDto> getQuestions(){
		
		List<Questions> questionsList = service.getQuestions();
		
		return questionsList
				.stream()
				.map(question-> mapper.map(question, QuestionsDto.class))
				.collect(Collectors.toList());
	}
	
	@GetMapping("/questions/{id}")
	
	public List<QuestionsDto> getCategorizedQuestions(@PathVariable("id") int id){
		List<Questions> questionsList = service.getCategorizeQuestions(id);
		
		return questionsList
				.stream()
				.map(question-> mapper.map(question, QuestionsDto.class))
				.collect(Collectors.toList());
	}

}



package com.pranav.dto;



import com.pranav.entity.Questions;

public class AnswersDto {
	

	private int id;
	
	private boolean answerA;
	
	private boolean answerB;
	
	private boolean answerC;
	
	private boolean answerD;
	
	private boolean answerE;
	
	private boolean answerF;
	
	
	public AnswersDto() {}

	public AnswersDto(int id, boolean answerA, boolean answerB, boolean answerC, boolean answerD, boolean answerE,
			boolean answerF) {
		super();
		this.id = id;
		this.answerA = answerA;
		this.answerB = answerB;
		this.answerC = answerC;
		this.answerD = answerD;
		this.answerE = answerE;
		this.answerF = answerF;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public boolean isAnswerA() {
		return answerA;
	}

	public void setAnswerA(boolean answerA) {
		this.answerA = answerA;
	}

	public boolean isAnswerB() {
		return answerB;
	}

	public void setAnswerB(boolean answerB) {
		this.answerB = answerB;
	}

	public boolean isAnswerC() {
		return answerC;
	}

	public void setAnswerC(boolean answerC) {
		this.answerC = answerC;
	}

	public boolean isAnswerD() {
		return answerD;
	}

	public void setAnswerD(boolean answerD) {
		this.answerD = answerD;
	}

	public boolean isAnswerE() {
		return answerE;
	}

	public void setAnswerE(boolean answerE) {
		this.answerE = answerE;
	}

	public boolean isAnswerF() {
		return answerF;
	}

	public void setAnswerF(boolean answerF) {
		this.answerF = answerF;
	}
	

}



package com.pranav.dto;



import com.pranav.entity.Questions;

public class OptionsDto {
	

	private int id;
	
	private Questions question;
	
	private String optionA;
	
	private String optionB;
	
	private String optionC;
	
	private String optionD;
	
	private String optionE;
	
	private String optionF;
	
	public OptionsDto() {}

	public OptionsDto(int id, String optionA, String optionB, String optionC, String optionD, String optionE,
			String optionF) {
		super();
		this.id = id;
		this.optionA = optionA;
		this.optionB = optionB;
		this.optionC = optionC;
		this.optionD = optionD;
		this.optionE = optionE;
		this.optionF = optionF;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getOptionA() {
		return optionA;
	}

	public void setOptionA(String optionA) {
		this.optionA = optionA;
	}

	public String getOptionB() {
		return optionB;
	}

	public void setOptionB(String optionB) {
		this.optionB = optionB;
	}

	public String getOptionC() {
		return optionC;
	}

	public void setOptionC(String optionC) {
		this.optionC = optionC;
	}

	public String getOptionD() {
		return optionD;
	}

	public void setOptionD(String optionD) {
		this.optionD = optionD;
	}

	public String getOptionE() {
		return optionE;
	}

	public void setOptionE(String optionE) {
		this.optionE = optionE;
	}

	public String getOptionF() {
		return optionF;
	}

	public void setOptionF(String optionF) {
		this.optionF = optionF;
	}
	

}


package com.pranav.dto;

import com.pranav.entity.Answers;
import com.pranav.entity.Options;
import com.pranav.entity.Tags;

public class QuestionsDto {
	
	
	private int id;

	private String question;
	
	private String description;

	private boolean multipleAnswers;
	
	private String correctAnswer;
	
	private String explanation;
	
	private String tip;
	
	private String category;
	
	private String difficulty;
	
	private Options options;
	
	private Answers answers;
	
	private Tags tags;

	
	public QuestionsDto() {}

	public QuestionsDto(int id, String question, String description, Options options, boolean multipleAnswers,String correctAnswer,
			Answers correctAnswerId, String explanation, String tip,String category, String difficulty, Tags tags) {
		super();
		this.id = id;
		this.question = question;
		this.description = description;
		this.options = options;
		this.multipleAnswers = multipleAnswers;
		this.answers = correctAnswerId;
		this.correctAnswer = correctAnswer;
		this.explanation = explanation;
		this.tip = tip;
		this.category = category;
		this.difficulty = difficulty;
		this.tags = tags;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getQuestion() {
		return question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	public String getDescription() {
		return description;
	}
	

	public Options getOptions() {
		return options;
	}

	public void setOptions(Options options) {
		this.options = options;
	}

	public Answers getAnswers() {
		return answers;
	}

	public void setAnswers(Answers answers) {
		this.answers = answers;
	}

	public Tags getTags() {
		return tags;
	}

	public void setTags(Tags tags) {
		this.tags = tags;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Options getOptionId() {
		return options;
	}

	public void setOptionId(Options optionId) {
		this.options = optionId;
	}

	public boolean isMultipleAnswers() {
		return multipleAnswers;
	}

	public void setMultipleAnswers(boolean multipleAnswers) {
		this.multipleAnswers = multipleAnswers;
	}

	public Answers getCorrectAnswerId() {
		return answers;
	}

	public void setCorrectAnswerId(Answers correctAnswerId) {
		this.answers = correctAnswerId;
	}

	public String getCorrectAnswer() {
		return correctAnswer;
	}

	public void setCorrectAnswer(String correctAnswer) {
		this.correctAnswer = correctAnswer;
	}

	public String getExplanation() {
		return explanation;
	}

	public void setExplanation(String explanation) {
		this.explanation = explanation;
	}

	public String getTip() {
		return tip;
	}

	public void setTip(String tip) {
		this.tip = tip;
	}


	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public String getDifficulty() {
		return difficulty;
	}

	public void setDifficulty(String difficulty) {
		this.difficulty = difficulty;
	}

}


package com.pranav.dto;


public class TagsDto {
	
	private int id;

	private String name;
	
	private String imageUrl;
	

	public TagsDto() {}

	public TagsDto(int id, String name, String imageURl) {
		super();
		this.id = id;
		this.name = name;
		this.imageUrl = imageURl;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getImageUrl() {
		return imageUrl;
	}

	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}
	

}


package com.pranav.entity;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name="answers")
public class Answers {
	
	@Id
	
	private int id;
	
	@Column(name="answer_a")
	private boolean answerA;
	
	@Column(name="answer_b")
	private boolean answerB;
	
	@Column(name="answer_c")
	private boolean answerC;
	
	@Column(name="answer_d")
	private boolean answerD;
	
	@Column(name="answer_e")
	private boolean answerE;
	
	@Column(name="answer_f")
	private boolean answerF;
	
	@OneToOne(mappedBy = "correctAnswers")
	private Questions question;
	
	public Answers() {}

	public Answers(int id, boolean answerA, boolean answerB, boolean answerC, boolean answerD, boolean answerE,
			boolean answerF) {
		super();
		this.id = id;
		this.answerA = answerA;
		this.answerB = answerB;
		this.answerC = answerC;
		this.answerD = answerD;
		this.answerE = answerE;
		this.answerF = answerF;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public boolean isAnswerA() {
		return answerA;
	}

	public void setAnswerA(boolean answerA) {
		this.answerA = answerA;
	}

	public boolean isAnswerB() {
		return answerB;
	}

	public void setAnswerB(boolean answerB) {
		this.answerB = answerB;
	}

	public boolean isAnswerC() {
		return answerC;
	}

	public void setAnswerC(boolean answerC) {
		this.answerC = answerC;
	}

	public boolean isAnswerD() {
		return answerD;
	}

	public void setAnswerD(boolean answerD) {
		this.answerD = answerD;
	}

	public boolean isAnswerE() {
		return answerE;
	}

	public void setAnswerE(boolean answerE) {
		this.answerE = answerE;
	}

	public boolean isAnswerF() {
		return answerF;
	}

	public void setAnswerF(boolean answerF) {
		this.answerF = answerF;
	}
	
	

}


package com.pranav.entity;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name="options_table")
public class Options {

	@Id
	@Column(name="id")
	private int id;
	
	@OneToOne(mappedBy = "options")
	private Questions question;
	
	@Column(name="option_a")
	private String optionA;
	
	@Column(name="option_b")
	private String optionB;
	
	@Column(name="option_c")
	private String optionC;
	
	@Column(name="option_d")
	private String optionD;
	
	@Column(name="option_e")
	private String optionE;
	
	@Column(name="option_f")
	private String optionF;
	
	public Options() {}

	public Options(int id, String optionA, String optionB, String optionC, String optionD, String optionE,
			String optionF) {
		super();
		this.id = id;
		this.optionA = optionA;
		this.optionB = optionB;
		this.optionC = optionC;
		this.optionD = optionD;
		this.optionE = optionE;
		this.optionF = optionF;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getOptionA() {
		return optionA;
	}

	public void setOptionA(String optionA) {
		this.optionA = optionA;
	}

	public String getOptionB() {
		return optionB;
	}

	public void setOptionB(String optionB) {
		this.optionB = optionB;
	}

	public String getOptionC() {
		return optionC;
	}

	public void setOptionC(String optionC) {
		this.optionC = optionC;
	}

	public String getOptionD() {
		return optionD;
	}

	public void setOptionD(String optionD) {
		this.optionD = optionD;
	}

	public String getOptionE() {
		return optionE;
	}

	public void setOptionE(String optionE) {
		this.optionE = optionE;
	}

	public String getOptionF() {
		return optionF;
	}

	public void setOptionF(String optionF) {
		this.optionF = optionF;
	}
	
	
	
}


package com.pranav.entity;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;



@Entity
@Table(name="questions")
public class Questions {
	

	@Id
	@Column(name="id")
	private int id;
	
	@Column(name="question")
	private String question;
	
	@Column(name="description")
	private String description;
	
	
	@Column(name="multiple_correct_answers")
	private boolean multipleAnswers;
	

	
	@Column(name="correct_answer")
	private String correctAnswer;
	
	@Column(name="explanation")
	private String explanation;
	
	@Column(name="tip")
	private String tip;
	

	
	@Column(name="category")
	private String category;
	
	@Column(name="difficulty")
	private String difficulty;
	
	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "option_id")
	private Options options;
	
	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "correct_answer_id")
	private Answers correctAnswers;
	
//	@OneToOne(cascade = CascadeType.ALL)
//	@JoinColumn(name = "tag_id")
//	private Tags tags;

	
	public Questions() {}

	public Questions(int id, String question, String description, Options options, boolean multipleAnswers,String correctAnswer,
			Answers correctAnswerId, String explanation, String tip,String category, String difficulty, Tags tags) {
		super();
		this.id = id;
		this.question = question;
		this.description = description;
		this.options = options;
		this.multipleAnswers = multipleAnswers;
		this.correctAnswers = correctAnswerId;
		this.correctAnswer = correctAnswer;
		this.explanation = explanation;
		this.tip = tip;
		this.category = category;
		this.difficulty = difficulty;
//		this.tags = tags;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getQuestion() {
		return question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	public String getDescription() {
		return description;
	}
	

	public Options getOptions() {
		return options;
	}

	public void setOptions(Options options) {
		this.options = options;
	}

	public Answers getAnswers() {
		return correctAnswers;
	}

	public void setAnswers(Answers answers) {
		this.correctAnswers = answers;
	}

//	public Tags getTags() {
//		return tags;
//	}
//
//	public void setTags(Tags tags) {
//		this.tags = tags;
//	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Options getOptionId() {
		return options;
	}

	public void setOptionId(Options optionId) {
		this.options = optionId;
	}

	public boolean isMultipleAnswers() {
		return multipleAnswers;
	}

	public void setMultipleAnswers(boolean multipleAnswers) {
		this.multipleAnswers = multipleAnswers;
	}


	public String getCorrectAnswer() {
		return correctAnswer;
	}

	public void setCorrectAnswer(String correctAnswer) {
		this.correctAnswer = correctAnswer;
	}

	public String getExplanation() {
		return explanation;
	}

	public void setExplanation(String explanation) {
		this.explanation = explanation;
	}

	public String getTip() {
		return tip;
	}

	public void setTip(String tip) {
		this.tip = tip;
	}


	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public String getDifficulty() {
		return difficulty;
	}

	public void setDifficulty(String difficulty) {
		this.difficulty = difficulty;
	}
}



package com.pranav.entity;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Table(name="tags")
public class Tags {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	
	@Column(name="name")
	private String name;
	
	@Column(name="imageUrl")
	private String imageUrl;
	
//	@OneToOne(mappedBy = "tags")
//	private Questions question;

	public Tags() {}

	public Tags(int id, String name, String imageUrl ,int star) {
		super();
		this.id = id;
		this.name = name;
		this.imageUrl = imageUrl;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getImageUrl() {
		return imageUrl;
	}

	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}
	
	
}




package com.pranav.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.pranav.entity.Tags;

public interface CategoryRepository extends JpaRepository<Tags, Integer> {

}




package com.pranav.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.pranav.entity.Questions;

public interface QuestionsRepository extends JpaRepository<Questions, Integer> {

	@Query(
			value="Select * from Questions u where u.tag_id = :id", nativeQuery = true
			)
	List<Questions> getCategorizedQuestions(@Param("id") int id);
}






package com.pranav.utility;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;

import com.pranav.dto.QuestionsDto;
import com.pranav.entity.Questions;
import com.pranav.repository.QuestionsRepository;

@Service
public class QuestionsService{
	
	private final QuestionsRepository repo;
	
	public QuestionsService(QuestionsRepository repo) {
		this.repo = repo;
	}
	
	
	public List<Questions> getQuestions(){
			
			return repo.findAll();
			
	}
	
	public List<Questions> getCategorizeQuestions(int id){
		
		return repo.getCategorizedQuestions(id);
	}

}




spring.jpa.hibernate.ddl-auto=none
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=0000
spring.datasource.url=jdbc:mysql://localhost:3306/quiz

spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

spring.jpa.show-sql=true







<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pranav</groupId>
	<artifactId>QuizBackend</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>QuizBackend</name>
	<description>Quiz Backend </description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
		  <groupId>org.modelmapper</groupId>
		  <artifactId>modelmapper</artifactId>
		  <version>3.0.0</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


--------------------------------FRONTEND-------------------------------------------------------------





<div class="text-center mt-5">
    <h1 class="display-5 ">Choose any Topic</h1>
    <p class="lead mt-5">Test your skills with our top topics with variety of questions.</p>
    <div class="container ">
        <div class="row row-cols-1 row-cols-md-4 row-cols-sm-2 g-4 " >
            <div class="col"  *ngFor="let category of categories" (click)="handleCardClick($event, category.id)">
               <div class="card shadow-sm p-3 mb-5 bg-body rounded onHover">
                <img src="{{category.imageUrl}}" alt=""class="card-image-top " >
                    <div class="card-body">
                        <h5 class="card-title">{{(category.name).toUpperCase()}}</h5>
                    </div>
               </div>
            </div>
            
        </div>
        
    </div>
</div>


import { Component, ElementRef, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { GetDataService } from 'src/app/services/get-data.service';
import { Category } from 'src/models/Category';
import { Question } from 'src/models/Question';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {

 
  categories: Category[];


  constructor(private service: GetDataService, private route:Router) { }

  ngOnInit(): void {
    this.service.getCategories().subscribe(data=> {
      this.categories = data;
      console.log(this.categories);
    });
  }

  handleCardClick(event, id:number){

    console.log(event.target);
    this.route.navigate(['/quiz',id]);
  }

}




.card{
    cursor: pointer;
}

.col >.card:hover{
    box-shadow:  rgba(0, 0, 0, 0.35) 0px 5px 15px ;
}











<nav class="navbar navbar-expand-lg bg-dark ">
    <div class="container ">
      <a class="navbar-brand  text-light" href="#">Quiz</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active text-light" aria-current="page" href="#">Home</a>
          </li>

         
        </ul>
        
      </div>
    </div>
  </nav>





import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}















.Q{
    padding: 15px 5px;
    background-color: rgba(44, 43, 43, 0.5);
    border-top-left-radius: 15%;
    border-bottom-left-radius: 15%;
    display: inline;
    border: 1px solid rgba(93, 93, 93,0.3);
}

.question{
    /* border: 1px solid black; */
    padding: 10px 5px;
    text-align: start;
    font-size: large;
 
}

.question > p{
    margin-left: 5px;
    padding: 15px 5px;
    display: inline;
}

.radio{
    display: block;
    padding: 15px 3px;
    font-size: large;
    border-bottom: 1px solid rgba(93, 93, 93,0.3);
}

.options{
    /* border: 1px solid black; */
    text-align: start;
    margin-left: 2%;
    
}

.largeCheckbox{
    transform: scale(1.5);
    margin-right: 2%;
}






<div class="container Question">
    <div class="question ">
        <span class="Q">Q:</span><p>{{question.question}}</p>
    </div>
    <div class="options" >
        <div *ngIf="checkNull(question.options.optionA)"><label class="radio"><input type="checkbox" class="largeCheckbox" value="answerA" name="answerA" (click)="chooseAnswer($event)" [checked]="checkedItems['answerA']"> {{question.options.optionA}}</label> </div>
        <div *ngIf="checkNull(question.options.optionB) "><label class="radio"><input type="checkbox" class="largeCheckbox" value="answerB" name="answerB" (click)="chooseAnswer($event)" [checked]="checkedItems['answerB']"> {{question.options.optionB}}</label> </div>
        <div *ngIf="checkNull(question.options.optionC) "><label class="radio"><input type="checkbox" class="largeCheckbox" value="answerC" name="answerC" (click)="chooseAnswer($event)"[checked]="checkedItems['answerC']"> {{question.options.optionC}}</label> </div>
        <div *ngIf="checkNull(question.options.optionD) "><label class="radio"><input type="checkbox" class="largeCheckbox" value="answerD" name="answerD" (click)="chooseAnswer($event)" [checked]="checkedItems['answerD']"> {{question.options.optionD}}</label> </div>
        <div *ngIf="checkNull(question.options.optionE) "><label class="radio"><input type="checkbox" class="largeCheckbox" value="answerE" name="answerE" (click)="chooseAnswer($event)" [checked]="checkedItems['answerE']"> {{question.options.optionE}}</label> </div>
        <div *ngIf="checkNull(question.options.optionF)"><label class="radio"><input type="checkbox" class="largeCheckbox" value="answerF" name="answerF" (click)="chooseAnswer($event)" [checked]="checkedItems['answerF']"> {{question.options.optionF}}</label> </div>

    </div>

   
</div>




import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Data } from 'src/app/services/Data.service';
import { GetDataService } from 'src/app/services/get-data.service';
import { Question } from 'src/models/Question';

@Component({
  selector: 'app-quiz-form',
  templateUrl: './quiz-form.component.html',
  styleUrls: ['./quiz-form.component.css']
})
export class QuizFormComponent implements OnInit {

  question: Question;


  checkedItems = {
    answerA: false,
    answerB: false,
    answerC: false,
    answerD: false,
    answerE: false,
    answerF: false,
  }

  constructor(private activatedRoute: ActivatedRoute, private service: GetDataService, private data:Data) { }

  ngOnInit(): void {
   
    this.activatedRoute.params.subscribe(data=>{
      this.question = this.data.storage;
   
      for(let item in this.checkedItems){
         this.checkedItems[item] = false;
      }
      
    })
    
  }

 checkNull(option){
   return option === null ? false: true;
 }

 chooseAnswer(event){
  this.checkedItems[event.target.name] = true;
  this.question.correctAnswer = event.target.value;

 }

}
















.item-container{
    display: grid;
    gap: 10px;
    grid-template-columns: auto auto auto auto auto;
    max-width: 60%;
    margin: auto;
}


.questions-tile{
    background-color: rgba(255, 223, 223, 0.3);
    max-width: 120px;
    max-height: 9vh;
    border-radius: 5%;
}

.questions-tile:visited{
    background-color: rgba(121, 119, 119, 0.3);
}

.questions-tile:hover{
    box-shadow: rgba(111, 111, 111, 1) 5px 5px 5px;
    transition: all 0.5s;
    background-color: black;
    color: white;
    cursor: pointer;
}


.item{
    padding: 0;
    margin: 0;
}


.finish-button{
    color:black;
    text-decoration: none;
    padding: 8px 20px;
    border: 1px solid black;
    border-radius: 5%;
}

.finish-button:hover{
    box-shadow: rgba(111, 111, 111, 1) 5px 5px 5px;
    transition: all 0.5s;
    background-color: black;
    color: white;
}



<div class="container text-center mt-5">
    <h3 class="display-3">
        {{questions[0].category}} Quiz  
    </h3>

    <div class="item-container mt-5"  >
        <div class="questions-tile" *ngFor="let question of questions; let j = index" (click)="handleQuestionClick($event, question) " >
            <p class="item">Question</p>
            <p  class="item">{{j+1}}</p>
        </div>
    </div>

    <div class="mt-5">
        <router-outlet></router-outlet>
    </div>
   
    <div class="mt-5 mb-5">
        <a class="finish-button" (click)="submitQuiz()">Finish Quiz</a>
    </div>
    
   
</div>


import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { GetDataService } from 'src/app/services/get-data.service';
import { Question } from 'src/models/Question';
import { Data } from 'src/app/services/Data.service';

@Component({
  selector: 'app-quiz-questions',
  templateUrl: './quiz-questions.component.html',
  styleUrls: ['./quiz-questions.component.css']
})
export class QuizQuestionsComponent implements OnInit {

  questions: Question[];
  id:number;
  i=0;


  constructor(private service:GetDataService, private activatedRoute: ActivatedRoute, private route: Router, private data: Data
    ) { }

  ngOnInit(): void {
    console.log(this.i);

    this.activatedRoute.params.subscribe(data=>{
      this.id = data['id'];
    })

    this.service.getQuestions(this.id).subscribe(data=>{
      this.questions = data;
      console.log(this.questions);
    })
  }

  handleQuestionClick(event, question:Question){
    this.data.storage = question;
    this.route.navigate(['question',question.id], {relativeTo: this.activatedRoute});

  }

  submitQuiz(){
    this.data.storage = this.questions;
    this.route.navigate(['results'],{relativeTo: this.activatedRoute});
  }

}











.results-container{
    padding: 30px 40px;
    box-shadow: 5px 2px 10px  rgba(101, 101, 101, 0.5);
}

.result-col-left{
    border-right: 1px solid gray;
    border-left: 1px solid gray;
}

.result-col-right{
    border-right: 1px solid gray;
    border-left: 1px solid gray;
}



<div class="container text-center mt-5 results-container">
    <h4 class="display-4">Quiz: {{questions[0].category}}</h4>

    <p class="mt-5 mb-5 lead">Quiz Information</p>

    <div class="row">
        <div class="col result-col-left">
            <p>Score : {{score}}%</p>
            <p>Total Questions: {{totalQuestions}}</p>
            <p>Correct Answers: {{correctAnswers}}</p>
        </div>
        <div class="col result-col-right">
            <p>Topic: {{questions[0].category}}</p>
            <p>Grade: {{grade}}</p>
            <p>Final: {{final}}</p>
        </div>
    </div>

    <div class="d-flex p-2 justify-content-end mb-5">
        <a  class="btn btn-outline-dark mt-5 " (click)="handleReviewClick()"> Review </a>
    </div>

    <hr>
    <router-outlet></router-outlet>
    
</div>




import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Data } from 'src/app/services/Data.service';
import { Question } from 'src/models/Question';

@Component({
  selector: 'app-quiz-result',
  templateUrl: './quiz-result.component.html',
  styleUrls: ['./quiz-result.component.css']
})
export class QuizResultComponent implements OnInit {

  questions: Question[];
  score:number;
  totalQuestions:number;
  correctAnswers = 0;
  grade: String;
  final:string;

  constructor(private route: Router, private activatedRoute: ActivatedRoute, private dataService: Data) { }

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((data:Question[])=>{
      this.questions = this.dataService.storage;
      this.totalQuestions = this.questions.length;
      this.calculateResult(this.questions)
    })
  }

  handleReviewClick(){
    this.dataService.storage = this.questions;
    this.route.navigate(['review'],{relativeTo: this.activatedRoute});
    
  }


  calculateResult(questions:Question[]){
    let correctAnswer = "";
    for(let question of questions){
      for(let answer in question.correctAnswerId){
        if(question.correctAnswerId[answer] == true){
          correctAnswer = answer;
        }
      }
      if(question.correctAnswer == correctAnswer){
        this.correctAnswers++;
      }
    }

     this.score = (this.correctAnswers/this.totalQuestions)*100;

     if(this.score <= 30){
      this.grade = "F";
     }else if(this.score <= 50){
      this.grade = "D";
     }else if(this.score <= 70){
      this.grade = "B";
     }else{
      this.grade = "A";
     }

     if(this.grade === "F"){
      this.final = "FAIL";
     }else{
      this.final = "PASS";
     }
     
  }

}










<div class="container mt-5">
<p class="mt-5 lead">Answers</p>

<div class="reviews" *ngFor="let question of questions">
    <div class="row">
        <p class="mt-5 mb-4">Question:  {{question.question}} </p>
        <div class="col result-col-left">
            <p class="lead mt-4 mb-4">Given Answers</p>
            <p [ngClass]="checkOption(question,question.correctAnswer) === question.options.optionA ? 'option-correct ' : 'option-incorrect'" >{{question.options.optionA}}</p>
            <p [ngClass]="checkOption(question,question.correctAnswer) === question.options.optionB ? 'option-correct ' : 'option-incorrect'">{{question.options.optionB}}</p>
            <p [ngClass]="checkOption(question,question.correctAnswer) === question.options.optionC ? 'option-correct ' : 'option-incorrect'">{{question.options.optionC}}</p>
            <p [ngClass]="checkOption(question,question.correctAnswer) === question.options.optionD ? 'option-correct ' : 'option-incorrect'">{{question.options.optionD}}</p>
        </div>
        <div class="col result-col-right">
            <p class="lead mt-4 mb-4">Correct Answers</p>
            <p [ngClass]="question.correctAnswerId.answerA ? 'option-correct ' : 'option-incorrect'" >{{question.options.optionA}}</p>
            <p [ngClass]="question.correctAnswerId.answerB ? 'option-correct ' : 'option-incorrect'">{{question.options.optionB}}</p>
            <p [ngClass]="question.correctAnswerId.answerC ? 'option-correct ' : 'option-incorrect'">{{question.options.optionC}}</p>
            <p [ngClass]="question.correctAnswerId.answerD ? 'option-correct ' : 'option-incorrect'">{{question.options.optionD}}</p>
            
        </div>
    </div>
</div>

</div>





.option-correct{
 
    border-left: 5px solid rgba(54, 218, 71, 0.5);
}

.option-incorrect{
    border-left: 5px solid rgba(218, 54, 54, 0.5);
}




import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Data } from 'src/app/services/Data.service';
import { Question } from 'src/models/Question';

@Component({
  selector: 'app-review',
  templateUrl: './review.component.html',
  styleUrls: ['./review.component.css']
})
export class ReviewComponent implements OnInit {

  questions: Question[];

  constructor(private dataService: Data, private activatedRoute: ActivatedRoute) { }

  ngOnInit(): void {
    this.activatedRoute.params.subscribe(data =>{
      this.questions = this.dataService.storage;
      console.log(this.questions);
      
    });
  }

  checkOption(question:Question,correctAnswer:String){
    let keys = Object.keys(question.options);
    console.log(correctAnswer);
    console.log(keys[1]);
    switch(correctAnswer){
      case ("answerA"):
        console.log()
        return question.options[keys[1]];
      
      case ("answerB"):
        return question.options[keys[2]];

      case ("answerB"):
        return question.options[keys[3]];

      case ("answerB"):
        return question.options[keys[4]];
      
        default:
          return "";
    }

  }

}










<router-outlet></router-outlet>

import { Component, OnInit } from '@angular/core';


@Component({
  selector: 'app-quiz',
  templateUrl: './quiz.component.html',
  styleUrls: ['./quiz.component.css']
})
export class QuizComponent implements OnInit {



  constructor() { }

  ngOnInit(): void {
   
  }

 

}



import { Injectable } from "@angular/core";

@Injectable( {
    providedIn: 'root'
})
export class Data{

    public storage:any;

    public constructor (){}
}






import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, Observable } from 'rxjs';
import { Category } from 'src/models/Category';
import { Question } from 'src/models/Question';

@Injectable({
  providedIn: 'root'
})
export class GetDataService {

  data:Question;

  baseUrl = 'http://localhost:8080/api/';

  constructor(private http: HttpClient) { }

  getQuestions(id:number): Observable<Question[]> {
    let url = this.baseUrl+'questions/'+id;
    return this.http.get(url).pipe(
      map( (response:Question[])=>  {
        // console.log(response);
        return response;
      })
    );
  }

  getCategories(): Observable<Category[]>{
    let url = this.baseUrl+'categories';
    return this.http.get(url).pipe(
      map((response:Category[])=> response)
    );
  }
}





import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './components/home/home.component';
import { QuizFormComponent } from './components/quiz/quiz-form/quiz-form.component';
import { QuizQuestionsComponent } from './components/quiz/quiz-questions/quiz-questions.component';
import { QuizResultComponent } from './components/quiz/quiz-result/quiz-result.component';
import { QuizComponent } from './components/quiz/quiz.component';
import { ReviewComponent } from './components/quiz/review/review.component';


const routes: Routes = [
  {path:"", component: HomeComponent},
  {path:"quiz/:id", component:QuizComponent,
   children:[
    {path:"",component:QuizQuestionsComponent, children:[
      {path:"question/:id", component:QuizFormComponent}
    ]},
    {path:"results", component:QuizResultComponent, children:[
      {path:"review", component:ReviewComponent}
    ]}
  ]
  }
  
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }








































